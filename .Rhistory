unlist() %>%
unique())
ui <- fluidPage(theme = BCCDC_theme,
linebreaks(1),
titlePanel("UBC-BCCDC Indigeneity, equity, diversity and inclusion (I-EDI) Resource List"),
linebreaks(1),
mainPanel(width = 12,
#-- header text --
h4("Welcome! This is a curated list of resources to support I-EDI for staff, faculty, and students involved with research at BCCDC."),
h6("You can browse resources by their categories by using the buttons at the top of the page."),
h6("You can search for resources by type, intended audience, and description by using the filters in the list."),
h5("If you would like to provide feedback about this page, or suggest another resource to be added, please use this form."),
linebreaks(1),
#-- buttons to select resource category
radioGroupButtons(
inputId = "category",
label = "Resource Categories",
choices = categories,
individual = TRUE),
#- check box for resource audience
awesomeCheckboxGroup(
inputId = "audience",
label = "I'm looking for resources for:",
choices = c("Faculty", "Staff", "Students"),
selected = "",
inline = TRUE),
#- table output
fluidRow(style = 'margin-left: 5%; margin-right: 5%;',
column(width = 12, align = "center",
reactableOutput("mytable")
)
)
) #- mainpanel
) #- fluidpage
server <- function(input, output, session) {
#- filter resource list to only resources with selected category and audience type
filtered_list <- reactive({
#filt_list <- resource_list
if(input$category != "All Categories"){
resource_list <- resource_list %>%
filter(str_detect(Category, regex(input$category, ignore_case = T)))
}
if(length(input$audience) == 1){
resource_list <- resource_list %>%
filter(str_detect(`Target Audience`, regex(input$audience, ignore_case = T)))
}
if(length(input$audience) == 2){
resource_list <- resource_list %>%
filter(str_detect(`Target Audience`, regex(input$audience[1], ignore_case = T))) %>%
filter(str_detect(`Target Audience`, regex(input$audience[2], ignore_case = T)))
}
if(length(input$audience) == 3){
resource_list <- resource_list %>%
filter(str_detect(`Target Audience`, regex(input$audience[1], ignore_case = T))) %>%
filter(str_detect(`Target Audience`, regex(input$audience[2], ignore_case = T))) %>%
filter(str_detect(`Target Audience`, regex(input$audience[3], ignore_case = T)))
}
resource_list
})
#- resource data table
output$mytable <- renderReactable({
reactable(filtered_list()[,c(1, 3:4, 6:8)],
filterable = T,
searchable = F,
theme = clean(),
#- settings for columns in table
columns = list(
'Resource Type' = colDef(
align = "center", minWidth = 75,
#- function to filter column by dropdown select menu
filterInput = function(values, name) {
tags$select(
# Set to undefined to clear the filter
onchange = sprintf("Reactable.setFilter('type-select', '%s', event.target.value || undefined)", name),
# "All" has an empty value to clear the filter, and is the default option
tags$option(value = "", "All"),
lapply(unique(values), tags$option),
"aria-label" = sprintf("Filter %s", name),
style = "width: 100%; height: 28px;"
)}
),
'Resource Creator' = colDef(
align = "center", minWidth = 75),
'Target Audience' = colDef(
align = "center", minWidth = 75),
'Available To' = colDef(
align = "center", minWidth = 75,
filterInput = function(values, name) { #- dropdown column filter
tags$select(
onchange = sprintf("Reactable.setFilter('type-select', '%s', event.target.value || undefined)", name),
lapply(unique(values), tags$option),
"aria-label" = sprintf("Filter %s", name),
style = "width: 100%; height: 28px;"
)}
),
'Description' = colDef(
minWidth = 200),
Resource = colDef(minWidth = 150,
cell = function(Resource) {
url <- resource_list[resource_list$Resource == Resource, "URL"]
htmltools::tags$a(href = as.character(url), target = "_blank", as.character(Resource))
})
),
defaultPageSize = 15,
elementId = c("type-select"))
}) #- reactable
} #-server
#-- Run -----
shinyApp(ui = ui, server = server)
library(shinyBS)
radioTooltip <- function(id, choice, title, placement = "bottom", trigger = "hover", options = NULL){
options = shinyBS:::buildTooltipOrPopoverOptionsList(title, placement, trigger, options)
options = paste0("{'", paste(names(options), options, sep = "': '", collapse = "', '"), "'}")
bsTag <- shiny::tags$script(shiny::HTML(paste0("
$(document).ready(function() {
setTimeout(function() {
$('input', $('#", id, "')).each(function(){
if(this.getAttribute('value') == '", choice, "') {
opts = $.extend(", options, ", {html: true});
$(this.parentElement).tooltip('destroy');
$(this.parentElement).tooltip(opts);
}
})
}, 500)
});
")))
htmltools::attachDependencies(bsTag, shinyBS:::shinyBSDep)
}
View(resource_list)
View(BCCDC_theme)
View(ui)
View(resource_list)
View(resource_list)
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
ui <- fluidPage(theme = BCCDC_theme,
linebreaks(1),
titlePanel("UBC-BCCDC Indigeneity, equity, diversity and inclusion (I-EDI) Resource List"),
linebreaks(1),
mainPanel(width = 12,
#-- header text --
h4("Welcome! This is a curated list of resources to support I-EDI for staff, faculty, and students involved with research at BCCDC."),
h6("You can browse resources by their categories by using the buttons at the top of the page."),
h6("You can search for resources by type, intended audience, and description by using the filters in the list."),
h5("If you would like to provide feedback about this page, or suggest another resource to be added, please use this form."),
linebreaks(1),
#-- buttons to select resource category
radioGroupButtons(
inputId = "category",
label = "Resource Categories",
choices = categories,
individual = TRUE),
radioTooltip(id = "category",
choice = categories,
title = "Description",
placement = "right",
trigger = "hover"),
#- check box for resource audience
awesomeCheckboxGroup(
inputId = "audience",
label = "I'm looking for resources for:",
choices = c("Faculty", "Staff", "Students"),
selected = "",
inline = TRUE),
#- table output
fluidRow(style = 'margin-left: 5%; margin-right: 5%;',
column(width = 12, align = "center",
reactableOutput("mytable")
)
)
) #- mainpanel
) #- fluidpage
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
library(shiny)
library(shinyBS)
ui <- shinyUI(
fluidPage(
fluidRow(
column(3,
HTML("<div class='container'><br>
<h1>Test</h1>
<div>
<label id='radio_venue_1'>
<input type='radio' value='1' role='button'> button 1
</label>
</div>
<div>
<label id='radio_venue_2'>
<input type='radio' value='2' role='button'> button 2
</label>
</div>
<div>
<label id='radio_venue_3'>
<input type='radio' value='3' role='button'> button 3
</label>
</div>
</div>")),
bsTooltip(id = "radio_venue_1", title = "Button 1 Explanation", placement = "right", trigger = "hover"),
bsTooltip(id = "radio_venue_2", title = "Button 2 Explanation", placement = "right", trigger = "hover"),
bsTooltip(id = "radio_venue_3", title = "Button 3 Explanation", placement = "right", trigger = "hover"),
column(9,'Plot')
)
)
)
server <- function(input, output, session) {}
shinyApp(ui = ui, server = server)
ui <- shinyUI(
fluidPage(
fluidRow(
column(3,
HTML("<div class='container'><br>
<h1>Test</h1>
<div>
<label id='radio_venue_1'>
<input type='radio' value='1' role='button'> button 1
</label>
</div>
<div>
<label id='radio_venue_2'>
<input type='radio' value='2' role='button'> button 2
</label>
</div>
<div>
<label id='radio_venue_3'>
<input type='radio' value='3' role='button'> button 3
</label>
</div>
</div>")),
bsTooltip(id = "radio_venue_1", title = "Button 1 Explanation", placement = "right", trigger = "hover"),
bsTooltip(id = "radio_venue_2", title = "Button 2 Explanation", placement = "right", trigger = "hover"),
bsTooltip(id = "radio_venue_3", title = "Button 3 Explanation", placement = "right", trigger = "hover"),
column(9,'Plot')
)
)
)
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/button_test.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/button_test.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
library(googledrive)
library(googlesheets4)
library(dplyr)
library(stringr)
library(shiny)
library(shinyWidgets)
library(bslib)
#library(DT)
library(reactable)
library(reactablefmtr)
library(shinyfilter)
library(shinyBS)
#drive_auth()
gs4_auth(token = drive_token())
BCCDC_theme <- bs_theme(
version = 5,
bg = "#fff",
fg = "#004B8C",
primary = "#004B8C",
secondary = "#5DA5DA",
info = "#5DA5DA",
base_font = "Arial",
heading_font = "Arial"
)
linebreaks <- function(n){HTML(strrep(br(), n))}
#--- load data from Google Sheet -----
resource_drive <- drive_get("Resource_list_shiny_app")
gs4_get(resource_drive)
resource_list <- read_sheet(resource_drive, sheet = 1) %>%
arrange(Category, Resource)
categories <- c("All Categories", strsplit(resource_list$Category, ", ") %>%
unlist() %>%
unique())
radioTooltip <- function(id, choice, title, placement = "bottom", trigger = "hover", options = NULL){
options = shinyBS:::buildTooltipOrPopoverOptionsList(title, placement, trigger, options)
options = paste0("{'", paste(names(options), options, sep = "': '", collapse = "', '"), "'}")
bsTag <- shiny::tags$script(shiny::HTML(paste0("
$(document).ready(function() {
setTimeout(function() {
$('input', $('#", id, "')).each(function(){
if(this.getAttribute('value') == '", choice, "') {
opts = $.extend(", options, ", {html: true});
$(this.parentElement).tooltip('destroy');
$(this.parentElement).tooltip(opts);
}
})
}, 500)
});
")))
htmltools::attachDependencies(bsTag, shinyBS:::shinyBSDep)
}
ui <- fluidPage(theme = BCCDC_theme,
linebreaks(1),
titlePanel("UBC-BCCDC Indigeneity, equity, diversity and inclusion (I-EDI) Resource List"),
linebreaks(1),
mainPanel(width = 12,
#-- header text --
h4("Welcome! This is a curated list of resources to support I-EDI for staff, faculty, and students involved with research at BCCDC."),
h6("You can browse resources by their categories by using the buttons at the top of the page."),
h6("You can search for resources by type, intended audience, and description by using the filters in the list."),
h5("If you would like to provide feedback about this page, or suggest another resource to be added, please use this form."),
linebreaks(1),
#-- buttons to select resource category
radioGroupButtons(
inputId = "category",
label = "Resource Categories",
choices = categories,
individual = TRUE),
radioTooltip(id = "category",
choice = categories,
title = Description,
placement = "right",
trigger = "hover"),
#- check box for resource audience
awesomeCheckboxGroup(
inputId = "audience",
label = "I'm looking for resources for:",
choices = c("Faculty", "Staff", "Students"),
selected = "",
inline = TRUE),
#- table output
fluidRow(style = 'margin-left: 5%; margin-right: 5%;',
column(width = 12, align = "center",
reactableOutput("mytable")
)
)
) #- mainpanel
) #- fluidpage
View(resource_list)
View(resource_list)
description <- c("Description for all Categories", strsplit(resource_list$Description, ", ") %>%
unlist() %>%
unique())
categories
description <- c("All categories","B&H training", "Student specific", "IEDI", "Ind-Decol", "Research","MH","SV","Hybrid work")
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
class(categories)
class(des)
class(description)
ui <- fluidPage(theme = BCCDC_theme,
linebreaks(1),
titlePanel("UBC-BCCDC Indigeneity, equity, diversity and inclusion (I-EDI) Resource List"),
linebreaks(1),
mainPanel(width = 12,
#-- header text --
h4("Welcome! This is a curated list of resources to support I-EDI for staff, faculty, and students involved with research at BCCDC."),
h6("You can browse resources by their categories by using the buttons at the top of the page."),
h6("You can search for resources by type, intended audience, and description by using the filters in the list."),
h5("If you would like to provide feedback about this page, or suggest another resource to be added, please use this form."),
linebreaks(1),
#-- buttons to select resource category
radioGroupButtons(
inputId = "category",
label = "Resource Categories",
choices = categories,
individual = TRUE),
radioTooltip(id = categories,
choice = as.list(categories),
title = as.list(description),
placement = "right",
trigger = "hover"),
#- check box for resource audience
awesomeCheckboxGroup(
inputId = "audience",
label = "I'm looking for resources for:",
choices = c("Faculty", "Staff", "Students"),
selected = "",
inline = TRUE),
#- table output
fluidRow(style = 'margin-left: 5%; margin-right: 5%;',
column(width = 12, align = "center",
reactableOutput("mytable")
)
)
) #- mainpanel
) #- fluidpage
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
categories
ui <- fluidPage(theme = BCCDC_theme,
linebreaks(1),
titlePanel("UBC-BCCDC Indigeneity, equity, diversity and inclusion (I-EDI) Resource List"),
linebreaks(1),
mainPanel(width = 12,
#-- header text --
h4("Welcome! This is a curated list of resources to support I-EDI for staff, faculty, and students involved with research at BCCDC."),
h6("You can browse resources by their categories by using the buttons at the top of the page."),
h6("You can search for resources by type, intended audience, and description by using the filters in the list."),
h5("If you would like to provide feedback about this page, or suggest another resource to be added, please use this form."),
linebreaks(1),
#-- buttons to select resource category
radioGroupButtons(
inputId = "category",
label = "Resource Categories",
choices = categories,
individual = TRUE),
radioTooltip(id = "category",
choice = "Bullying and Harassment Prevention",
title = "All cat explain",
placement = "right",
trigger = "hover"),
#- check box for resource audience
awesomeCheckboxGroup(
inputId = "audience",
label = "I'm looking for resources for:",
choices = c("Faculty", "Staff", "Students"),
selected = "",
inline = TRUE),
#- table output
fluidRow(style = 'margin-left: 5%; margin-right: 5%;',
column(width = 12, align = "center",
reactableOutput("mytable")
)
)
) #- mainpanel
) #- fluidpage
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
category_des <- as.data.frame(categories) %>%
dplyr::mutate(description=c("",
"Training resources for workplace bullying and harrasment",
"Student specific resources",
"Equity and diversity in workplace related resources",
"Idigeneity and cultural safety",
"Applicable to research process",
"MH",
"SV",
"Hybrid work"))
View(category_des)
category_des <- as.data.frame(categories) %>%
dplyr::mutate(description=c("Complete list",
"Training resources for workplace bullying and harrasment",
"Student specific resources",
"Equity and diversity in workplace related resources",
"Idigeneity and cultural safety",
"Applicable to research process",
"MH",
"SV",
"Hybrid work"))
description <- category_des$description
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
class(categories)
class(description)
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
description
category
categories
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
pak::pak("posit-dev/r-shinylive")
install.packages("pak")
#install.packages("pak")
pak::pak("posit-dev/r-shinylive")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
#install.packages("pak")
pak::pak("posit-dev/r-shinylive")
pkgbuild::check_build_tools(debug = TRUE)
library(shiny); runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
shinylive::export(appdir = "myapp", destdir = "docs")
library(shinylive)
library(shinylive)
shinylive::export(appdir = "myapp", destdir = "docs")
shinylive::export(appdir = "C:\Users\Freddy Francis\Documents\GitHub\freddyfrancis.github.io\myapp", destdir = "C:\Users\Freddy Francis\Documents\GitHub\freddyfrancis.github.io\docs")
install.packages(c("archive", "bayesm", "BH", "brew", "brio", "bslib", "checkmate", "cli", "clue", "commonmark", "compositions", "cowplot", "cplm", "cpp11", "crosstalk", "curl", "data.table", "data.tree", "DBI", "dbplyr", "DEoptimR", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastcluster", "future", "future.apply", "gamlss", "gdata", "gert", "getopt", "ggdist", "ggplot2", "ggrepel", "ggthemes", "glmmTMB", "glue", "gtools", "haven", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr2", "hunspell", "igraph", "jsonlite", "knitr", "later", "lava", "leaflet", "leaflet.providers", "lifecycle", "listenv", "lme4", "lubridate", "markdown", "Matrix", "MatrixModels", "matrixStats", "mclust", "meta", "metafor", "minqa", "mvtnorm", "openssl", "optparse", "pak", "pcaPP", "pkgbuild", "pkgload", "plotly", "pls", "plyr", "prettyunits", "pROC", "processx", "progress", "ps", "ragg", "randomForestSRC", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "recipes", "renv", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rsconnect", "RSQLite", "sandwich", "sass", "scales", "servr", "shiny", "shinylive", "shinyWidgets", "slider", "sp", "stringi", "stringr", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "timetk", "tinytex", "TMB", "tseries", "TTR", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "warp", "wesanderson", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zCompositions", "ZIBR", "zip"))
version
version
version
library(shiny); runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
install.packages(c("cli", "digest", "htmltools", "httpuv", "later", "Rcpp", "rlang"))
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
library(shiny); runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
install.packages("htmltools")
library(shiny); runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
setwd("~/GitHub/freddyfrancis.github.io")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
install.packages("httpuv")
install.packages("httpuv")
library(shiny); runApp('C:/Users/Freddy Francis/OneDrive - UBC/ownCloud/UBC Grad/BCCDC/Volunteering_a_Mentorship/EDI_resources_shinyapp/app_script_freddy_working_draft.R')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "later", "Rcpp", "rlang"))
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("rlang")
